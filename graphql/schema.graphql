### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Booking {
  game: Game
  id: String
  number_of_participants: Int
  timeSlot: TimeSlot
  user: User
}

type Game {
  description: String
  id: String
  location: String
  name: String
  price: Float
  remaining_slot: Int
  timeSlots: [TimeSlot]
}

type Mutation {
  booking(game_id: String, number_of_participants: Int, time_slot_id: String, user_id: String): Booking
  createTimeSlot(endTime: String, game_id: String, startTime: String): TimeSlot
  createTimeSlots(timeSlots: [TimeSlotInputType]): [TimeSlot]
  createUser(address: String, avatarURL: String, email: String, firstName: String, lastName: String, role: Role): User
  game(description: String, location: String, name: String, price: Float, remaining_slot: Int): Game
  updateGame(description: String, id: String, location: String, name: String, price: Float, remaining_slot: Int, timeSlots: [TimeSlotUpsertType]): Game
  upsertTimeSlots(timeSlots: [TimeSlotUpsertType]): [TimeSlot]
  user(address: String, avatarURL: String, email: String, firstName: String, id: String, lastName: String, role: Role): User
}

type Query {
  bookings: [Booking]!
  game(game_id: String): Game
  games: [Game]!
  timeSlotByGameId(game_id: String): [TimeSlot]!
  timeslots: [TimeSlot]!
  user(email: String): User
  vouchers: [Voucher]!
}

enum Role {
  ADMIN
  STORE_OWNER
  USER
}

type TimeSlot {
  endTime: String
  game: Game
  game_id: String
  id: String
  startTime: String
}

input TimeSlotInputType {
  endTime: String!
  game_id: String!
  startTime: String!
}

input TimeSlotUpsertType {
  endTime: String!
  game_id: String!
  id: String
  startTime: String!
}

type User {
  address: String
  avatarURL: String
  email: String
  firstName: String
  id: String
  lastName: String
  role: Role
}

type Voucher {
  discount: Float
  id: String
  id_game: String
  id_user: String
  remaining_amount: Int
  status: Boolean
}